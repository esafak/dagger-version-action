name: Test Dagger Version Action

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  test-with-checkout:
    name: Test ${{ matrix.repository }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - repository: 'dagger/registry-redirect'
          - repository: 'dagger/agents'
            path: 'melvin'
    
    steps:
      # Checkout the action's code
      - name: Checkout action code
        uses: actions/checkout@v4

      # Checkout the target repository
      - name: Checkout ${{ matrix.repository }}
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repository }}
          path: 'target-repo'
      
      # Debug: Check if dagger.json exists in the target repository
      - name: Debug dagger.json
        run: |
          TARGET_PATH="target-repo${{ matrix.path && format('/{0}', matrix.path) || '' }}"
          echo "Checking for dagger.json in $TARGET_PATH"
          if [ -f "$TARGET_PATH/dagger.json" ]; then
            echo "dagger.json exists with content:"
            cat "$TARGET_PATH/dagger.json"
          else
            echo "dagger.json does not exist in the target path"
            ls -la "$TARGET_PATH"
          fi

      # Debug: Print the path that will be passed to the action
      - name: Debug path parameter
        run: |
          echo "Path parameter: target-repo${{ matrix.path && format('/{0}', matrix.path) || '' }}"

      # Test with path parameter - use explicit path with quotes
      - name: Test with path parameter
        id: test_path
        uses: ./
        with:
          path: "target-repo${{ matrix.path && format('/{0}', matrix.path) || '' }}"

      # Display result with path information
      - name: Display test results
        run: |
          REPO="${{ matrix.repository }}"
          PATH_INFO="${{ matrix.path && format(' (Path: {0})', matrix.path) || ' (Root)' }}"
          VERSION="${{ steps.test_path.outputs.version }}"
          
          echo "Repository: $REPO$PATH_INFO"
          echo "Dagger version: $VERSION"
          
          # Validate that we got a version
          if [ -z "$VERSION" ]; then
            echo "Error: No version was returned"
            exit 1
          fi
          echo "âœ… Test passed: Version detected as $VERSION"
