name: "Dagger Version"
description: "Get the required Dagger version from dagger.json"
branding:
  icon: "tag"
  color: "blue"

inputs:
  path:
    description: "Path to the directory containing dagger.json (defaults to repository root)"
    required: false
    default: ""

runs:
  using: composite

  steps:
    - name: Get Version from dagger.json
      id: get_version
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get the path parameter (defaults to empty string which means root)
          const dirPath = core.getInput('path');
          
          // Build the file path, joining the directory path if provided
          const jsonFileName = 'dagger.json';
          const filePath = dirPath ? 
            path.join(process.env.GITHUB_WORKSPACE, dirPath, jsonFileName) : 
            path.join(process.env.GITHUB_WORKSPACE, jsonFileName);
          
          // Build the API path
          const apiPath = dirPath ? `${dirPath}/${jsonFileName}` : jsonFileName;

          if (fs.existsSync(filePath)) { // File exists locally, read from the local file system
            const content = fs.readFileSync(filePath, 'utf8');
            let data;

            try {
              data = JSON.parse(content);

              if (!data.engineVersion) {
                core.setFailed('Error: "engineVersion" field is missing in local dagger.json.');
              } else {
                core.setOutput('version', data.engineVersion);
                console.log(`Version obtained from local file at: ${filePath}`);
              }
            } catch (parseError) {
              core.setFailed(`Error parsing local dagger.json at ${filePath}: ${parseError.message}`);
            }
          } else { // File doesn't exist locally, fetch using GitHub API
            console.log(`Local dagger.json not found at ${filePath}. Fetching via GitHub API...`);

            try {
              const response = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: apiPath,
                ref: context.ref,
              });

              // The content is base64 encoded
              const content = Buffer.from(response.data.content, 'base64').toString('utf8');
              let data;

              try {
                data = JSON.parse(content);

                if (!data.engineVersion) {
                  core.setFailed(`Error: "engineVersion" field is missing in dagger.json fetched via API from path: ${apiPath}`);
                } else {
                  core.setOutput('version', data.engineVersion);
                  console.log(`Version obtained from GitHub API from path: ${apiPath}`);
                }
              } catch (parseError) {
                core.setFailed(`Error parsing dagger.json fetched via API from path ${apiPath}: ${parseError.message}`);
              }
            } catch (error) {
              if (error.status === 404) {
                core.setFailed(`Error: dagger.json not found at path ${apiPath} via GitHub API.`);
              } else {
                core.setFailed(`An error occurred while fetching dagger.json via API from path ${apiPath}: ${error.message}`);
              }
            }
          }

    - name: Dagger Version
      shell: bash
      if: success()
      run: 'echo "Dagger version: ${{ steps.get_version.outputs.version }}"'
